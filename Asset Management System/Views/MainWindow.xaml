<CSClasses:CSWindow x:Class="Asset_Management_System.Views.MainWindow"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:catel="http://catel.codeplex.com"
                  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
              xmlns:CSClasses="clr-namespace:CodeSphere.CSClasses;assembly=CodeSphere"
              xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"              
              xmlns:vFlyouts="clr-namespace:Asset_Management_System.Views.Flyouts"
              xmlns:vmFlyouts="clr-namespace:Asset_Management_System.ViewModels.Flyouts"
              xmlns:vFile="clr-namespace:Asset_Management_System.Views.File"
              xmlns:vmFile="clr-namespace:Asset_Management_System.ViewModels.File"
              xmlns:v="clr-namespace:Asset_Management_System.Views"
              xmlns:vm="clr-namespace:Asset_Management_System.ViewModels"
              xmlns:vmReports="clr-namespace:Asset_Management_System.ViewModels.Reports"
              xmlns:vReports="clr-namespace:Asset_Management_System.Views.Reports"
              ResizeMode="CanResize"
              Title="{Binding Title}"             
              WindowState="Maximized"
              ShowTitleBar="True"
                    IsCloseButtonEnabled="{Binding IsBusy,Converter={catel:BooleanToOppositeBooleanConverter}}"
              WindowButtonCommandsOverlayBehavior="HiddenTitleBar"
              RightWindowCommandsOverlayBehavior="HiddenTitleBar"
              ShowIconOnTitleBar="True"                 
              ShowMaxRestoreButton="False">
    <CSClasses:CSWindow.Resources>
        <ResourceDictionary>
            <VisualBrush x:Key="IsLoggedIn" Stretch="Fill" Visual="{StaticResource appbar_door_leave}"/>
            <VisualBrush x:Key="IsNotLoggedIn" Stretch="Fill" Visual="{StaticResource appbar_door_enter}"/>
            <!--File -->
            <DataTemplate DataType="{x:Type vmFile:SaveAsViewModel}">
                <vFile:SaveAs DataContext="{Binding}"/>
            </DataTemplate>
            <!-- Flyouts-->
            <DataTemplate DataType="{x:Type vmFlyouts:LoginViewModel}">
                <vFlyouts:Login DataContext="{Binding User}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vmFlyouts:AddNewUserViewModel}">
                <vFlyouts:AddNewUser DataContext="{Binding FlyoutContent}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vmFlyouts:AppSettingsViewModel}">
                <vFlyouts:AppSettings DataContext="{Binding FlyoutContent}"/>
            </DataTemplate>

            <!--Reports-->
            <DataTemplate DataType="{x:Type vmReports:ReportsAssetViewModel}">
                <vReports:ReportsAsset DataContext="{Binding FlyoutContent}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vmReports:AssetManagementSystemBlankViewModel}">
                <vReports:AssetManagementSystemBlank DataContext="{Binding}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vmReports:AssetMasterListViewModel}">
                <vReports:AssetMasterList DataContext="{Binding}"/>
            </DataTemplate>
        </ResourceDictionary>
    </CSClasses:CSWindow.Resources>
    <CSClasses:CSWindow.Flyouts>
        <CSClasses:CSUserControlFlyoutsControl x:Name="Flyout">
            <CSClasses:CSUserControlFlyouts Header="{Binding FlyoutContent.Title}" CloseCommand="{Binding CommandCloseFlyout}"                                            
       Theme="Adapt"  IsOpen="{Binding ShowFlyout}" IsModal="True" 
                                                   Position="Right" Content="{Binding Path=FlyoutContent}">
            </CSClasses:CSUserControlFlyouts>
        </CSClasses:CSUserControlFlyoutsControl>
    </CSClasses:CSWindow.Flyouts>
    <CSClasses:CSWindow.RightWindowCommands>
        <CSClasses:CSWindowCommands IsEnabled="{Binding IsBusy,Converter={catel:BooleanToOppositeBooleanConverter}}" ShowSeparators="True">
            <!--Notification-->
            <Button Command="{Binding CommandShowNotifications}" >
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="20" Height="20"
                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill"
                         Visual="{StaticResource appbar_warning_circle}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                </StackPanel>
            </Button>
            <!--Refresh-->
            <Button Command="{Binding CommandRefreshMainContent}" >
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="20" Height="20"
                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill"
                         Visual="{StaticResource appbar_refresh}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                </StackPanel>
            </Button>
            <!--Login-->
            <Button Command="{Binding CommandShowLogin}">
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="20" Height="20" Name="LoginImage">
                        <Rectangle.Resources>
                            <!--{Binding DataContext.PropertyName, RelativeSource={RelativeSource FindAncestor, 
    AncestorType={x:Type YourViewsNamespace:YourParentView}}}-->
                        </Rectangle.Resources>
                        <Rectangle.Style>
                            <Style TargetType="{x:Type Rectangle}">
                                <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                                <Setter Property="OpacityMask" Value="{StaticResource IsNotLoggedIn}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=UserIsAuthenticated}" Value="true">
                                        <Setter Property="OpacityMask"  Value="{StaticResource IsLoggedIn}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                    <TextBlock Margin="4 0 0 0"
                   VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Login"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=UserIsAuthenticated}" Value="True">
                                        <Setter Property="Text" Value="Logout"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                </StackPanel>
            </Button>
            <!--Settings-->
            <Button Command="{Binding CommandOpenSettings}">
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="20" Height="20"
                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill"
                         Visual="{StaticResource appbar_settings}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <TextBlock Margin="4 0 0 0"
                   VerticalAlignment="Center"
                   Text="settings" />
                </StackPanel>
            </Button>
            <!--About-->
            <Button Command="{Binding CommandShowAbout}">
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="20" Height="20"
                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill"
                         Visual="{StaticResource appbar_information_circle}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <TextBlock Margin="4 0 0 0"
                   VerticalAlignment="Center"
                   Text="about" />
                </StackPanel>
            </Button>

        </CSClasses:CSWindowCommands>
    </CSClasses:CSWindow.RightWindowCommands>
    <catel:StackGrid>
        <catel:StackGrid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="1*"/>
        </catel:StackGrid.RowDefinitions>
        <StackPanel>
            <Menu IsMainMenu="True" Margin="3,0">
                <Menu.Resources>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="Margin" Value="5,0" />
                        <Setter Property="Padding" Value="10,0" />
                        <!--<Setter Property="Width" Value="50"/>-->
                    </Style>
                </Menu.Resources>
                <MenuItem Header="_File" >
                    <MenuItem Header="_Save as" Padding="3,0"/>
                    <MenuItem Header="_Test" Command="{Binding testcommand}"/>
                </MenuItem>
                <MenuItem Header="_Reports">
                    <MenuItem Header="General List" Padding="3,0" Command="{Binding CommandShowAssetList}"/>
                    <MenuItem Header="_Asset List" Padding="3,0" Command="{Binding CommandShowAssetList}" />
                    <MenuItem Header="Asset Request" Padding="3,0" Command="{Binding CommandShowAssetList}"/>
                   
                </MenuItem>
            </Menu>
        </StackPanel>
        <Border BorderBrush="Crimson" BorderThickness="2">
            <xctk:BusyIndicator IsBusy="{Binding IsBusy}" BorderThickness="0">
                <CSClasses:CSClassesTransitioningContentControl Content="{Binding MainContent}"  BorderBrush="Beige"
                                                    BorderThickness="1" Transition="LeftReplace" />
            </xctk:BusyIndicator>
        </Border>
    </catel:StackGrid>
</CSClasses:CSWindow>
